#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <ctype.h>

#define MAX_LINE_LENGTH 1024
#define MAX_ARGS 64
#define DELIMITER " \t\r\n\a"

int is_delimiter(char c) {
    char delimiters[] = DELIMITER;
    for (int i = 0; i < strlen(delimiters); i++) {
        if (c == delimiters[i])
            return 1;
    }
    return 0;
}

int is_interactive_mode() {
    return isatty(fileno(stdin));
}

int is_alphanumeric(const char *str) {
    while (*str) {
        if (!isalnum(*str))
            return 0;
        str++;
    }
    return 1;
}

int string_to_integer(const char *str) {
    int result = 0;
    int sign = 1;
    int i = 0;

    if (str[0] == '-') {
        sign = -1;
        i++;
    }

    for (; str[i] != '\0'; i++) {
        if (!isdigit(str[i])) {
            fprintf(stderr, "Invalid integer: %s\n", str);
            exit(EXIT_FAILURE);
        }
        result = result * 10 + (str[i] - '0');
    }

    return result * sign;
}

void execute_command(char *args[]) {
    pid_t pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Child process
        if (execvp(args[0], args) == -1) {
            perror("execvp failed");
            exit(EXIT_FAILURE);
        }
    } else {
        // Parent process
        wait(NULL);
    }
}

void parse_input(char *line, char *args[]) {
    char *token;
    int i = 0;

    token = strtok(line, DELIMITER);
    while (token != NULL && i < MAX_ARGS - 1) {
        args[i] = token;
        i++;
        token = strtok(NULL, DELIMITER);
    }
    args[i] = NULL;
}

int main() {
    char line[MAX_LINE_LENGTH];
    char *args[MAX_ARGS];

    while (1) {
        printf("shell > ");
        if (fgets(line, sizeof(line), stdin) == NULL) {
            perror("fgets failed");
            exit(EXIT_FAILURE);
        }

        // Remove trailing newline character
        line[strcspn(line, "\n")] = '\0';

        parse_input(line, args);

        if (args[0] != NULL) {
            if (strcmp(args[0], "exit") == 0) {
                exit(EXIT_SUCCESS);
            } else if (strcmp(args[0], "interactive") == 0) {
                printf("Interactive mode: %s\n", is_interactive_mode() ? "true" : "false");
            } else if (strcmp(args[0], "alphanumeric") == 0) {
                if (args[1] != NULL) {
                    printf("Is alphanumeric: %s\n", is_alphanumeric(args[1]) ? "true" : "false");
                } else {
                    fprintf(stderr, "Missing argument\n");
                }
            } else if (strcmp(args[0], "integer") == 0) {
                if (args[1] != NULL) {
                    int result = string_to_integer(args[1]);
                    printf("Parsed integer: %d\n", result);
                } else {
                    fprintf(stderr, "Missing argument\n");
                }
            } else {
                execute_command(args);
            }
        }
    }

    return 0;
}
