#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define MAX_LINE_LENGTH 1024
#define MAX_ARGS 64
#define DELIMITER " \t\r\n\a"

bool interactive_mode = false;  // Global variable to track interactive mode

// Function to check if the shell is in interactive mode
bool is_interactive() {
    return interactive_mode;
}

// Function to check if a character is a delimiter
bool is_delim(char c) {
    const char *delimiters = DELIMITER;
    return strchr(delimiters, c) != NULL;
}

// Function to check if a character is alphabetic
bool _isalpha(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}

// Function to convert a string to an integer
int _atoi(const char *str) {
    int result = 0;
    int sign = 1;
    int i = 0;

    // Handle negative sign
    if (str[0] == '-') {
        sign = -1;
        i = 1;
    }

    // Convert each digit to integer and accumulate the result
    for (; str[i] != '\0'; i++) {
        result = result * 10 + (str[i] - '0');
    }

    return sign * result;
}

// Function to exit the shell
void _myexit() {
    exit(EXIT_SUCCESS);
}

// Function to change the current directory of the process
void _mycd(char *args[]) {
    if (args[1] == NULL) {
        fprintf(stderr, "mycd: expected argument to 'mycd'\n");
    } else {
        if (chdir(args[1]) != 0) {
            perror("mycd");
        }
    }
}

// Function to display the history list
void _myhistory(char *history[], int count) {
    for (int i = 0; i < count; i++) {
        printf("%d: %s\n", i, history[i]);
    }
}

// Function to unset an alias
void unset_alias(char *alias) {
    // Implementation to unset an alias
    printf("Unsetting alias: %s\n", alias);
}

// Function to set an alias
void set_alias(char *alias, char *command) {
    // Implementation to set an alias
    printf("Setting alias: %s=%s\n", alias, command);
}

// Function to print an alias
void print_alias(char *alias) {
    // Implementation to print an alias
    printf("Alias: %s\n", alias);
}

// Function to handle the 'myalias' command
void _myalias(char *args[]) {
    if (args[1] == NULL) {
        // Display aliases
        printf("Current aliases:\n");
        // Implementation to display aliases

    } else if (args[2] == NULL) {
        // Print an alias
        print_alias(args[1]);
    } else if (strcmp(args[1], "-r") == 0) {
        // Unset an alias
        unset_alias(args[2]);
    } else {
        // Set an alias
        set_alias(args[1], args[2]);
    }
}

int main() {
    char line[MAX_LINE_LENGTH];
    char *args[MAX_ARGS];

    interactive_mode = true;  // Set interactive mode

    while (1) {
        printf("shell > ");

        if (fgets(line, sizeof(line), stdin) == NULL) {
            perror("fgets failed");
            exit(EXIT_FAILURE);
        }

        // Remove trailing newline character
        line[strcspn(line, "\n")] = '\0';

        // Parse input and execute commands accordingly
        // ...

    }

    return 0;
}
